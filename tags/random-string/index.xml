<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>random string on Yullin Blog 运维 生活</title>
    <link>//yull.in/tags/random-string.html</link>
    <description>Recent content in random string on Yullin Blog 运维 生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Feb 2021 17:52:02 +0000</lastBuildDate><atom:link href="//yull.in/tags/random-string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>random string in golang</title>
      <link>//yull.in/2021/02/random-string-in-golang.html</link>
      <pubDate>Sun, 07 Feb 2021 17:52:02 +0000</pubDate>
      
      <guid>//yull.in/2021/02/random-string-in-golang.html</guid>
      <description>在学习golang的过程中，有注意到对于随机字符串的生成方式有很多种，下面就网上的罗列一下，最后一种是我最喜欢的方式，够优雅。
第一种 通用方案 最普通方案就是随机产生每个字符，所以整体字符串也是随机的。这样的好处是可以控制要使用的字符。
func init() { rand.Seed(time.Now().UnixNano()) } var letterRunes = []rune(&amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;) func RandStringRunes(n int) string { b := make([]rune, n) for i := range b { b[i] = letterRuens[rand.</description>
    </item>
    
  </channel>
</rss>
